{% set spoke = ztp_spokes[index] %}
{% set spoke_name = spoke.name %}
{% set spoke_manifests = 'spoke_' + spoke.name + '_manifests' %}
{% set spoke_network_type = spoke.get('network_type', ztp_spoke_network_type) %}
{% set spoke_api_ip = spoke.get('api_ip') %}
{% set spoke_ingress_ip= spoke.get('ingress_ip') %}
{% set spoke_ctlplanes_number = spoke.get('ctlplanes_number', 1) %}
{% set spoke_workers_number = spoke.get('workers_number', 0) %}
{% set virtual_nodes_number = spoke["virtual_nodes_number"]|default(0) %}
{% if spoke_api_ip != None and ':' in spoke_api_ip %}
{% set ipv6 = True %}
{% elif ':' in baremetal_cidr %}
{% set ipv6 = True %}
{% else %}
{% set ipv6 = False %}
{% endif %}
{% set cluster_network_ipv6 = {"cidr": "fd01::/48", "hostPrefix": 64} %}
{% set cluster_network_ipv4 = {"cidr": "10.132.0.0/14", "hostPrefix": 23} %}
{% set service_network_ipv6 = ["fd02::/112"] %}
{% set service_network_ipv4 = ["172.30.0.0/16"] %}
{% set machine_cidr_ipv4 = ["10.0.0.0/16"] %}
{% set machine_cidr_ipv6 = ["fc00::/48"] %}
{% if dualstack|default(False) %}
{% set machine_cidrs = machine_cidr_ipv4 + machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv4] + [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv4 + service_network_ipv6 %}
{% if ipv6 %}
{% set machine_cidrs = machine_cidrs|reverse %}
{% set cluster_networks = cluster_networks|reverse %}
{% set service_networks = service_networks|reverse %}
{% endif %}
{% elif ipv6 %}
{% set machine_cidrs = machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv6 %}
{% else %}
{% set machine_cidrs = machine_cidr_ipv4 %}
{% set cluster_networks = [cluster_network_ipv4] %}
{% set service_networks = service_network_ipv4 %}
{% endif %}
apiVersion: v1
kind: Namespace
metadata:
  name: ${SPOKE}
---
apiVersion: v1
kind: Secret
metadata:
  name: assisted-deployment-pull-secret
  namespace: ${SPOKE}
stringData:
  .dockerconfigjson: '${PULLSECRET}'
  type: kubernetes.io/dockerconfigjson
---
apiVersion: extensions.hive.openshift.io/v1beta1
kind: AgentClusterInstall
metadata:
  name: ${SPOKE}
  namespace: ${SPOKE}
  annotations:
    agent-install.openshift.io/install-config-overrides: '{"networking":{"networkType":"{{ spoke_network_type }}"}}'
spec:
{% if tpm|default(False) %}
  diskEncryption:
    mode: tpmv2
    enableOn: all
{% endif %}
{% if spoke_manifests|find_manifests %}
  manifestsConfigMapRefs:
{% for manifest in spoke_manifests|find_manifests %}
{% if manifest != 'nmstate.yaml' %}
  - name: {{ manifest|replace('.', '-')|replace('_', '-') }}
{% endif %}
{% endfor %}
{% endif %}
{% if spoke_ctlplanes_number > 1 and spoke_api_ip != None and spoke_ingress_ip != None %}
  apiVIP: {{ spoke_api_ip }}
  ingressVIP: {{ spoke_ingress_ip }}
{% endif %}
  clusterDeploymentRef:
    name: ${SPOKE}
  imageSetRef:
    name: openshift-v${MINOR}
  networking:
    machineNetwork:
    - cidr: {{ baremetal_cidr }}
  {% if dualstack and dualstack_cidr != None %}
    - cidr: {{ dualstack_cidr }}
  {% endif %}
    clusterNetwork:
  {% for network in cluster_networks %}
    - cidr: {{ network['cidr'] }}
      hostPrefix: {{ network['hostPrefix'] }}
  {% endfor %}
    serviceNetwork:
  {% for network in service_networks %}
    - {{ network }}
  {% endfor %}
{% if (spoke_ctlplanes_number > 1 or spoke_workers_number > 0) and spoke_api_ip == None and spoke_ingress_ip == None %}
    userManagedNetworking: True
{% endif %}
  provisionRequirements:
    controlPlaneAgents: ${MASTERS_NUMBER}
    workerAgents: ${WORKERS_NUMBER}
  sshPublicKey: "${SSH_PUB_KEY}"
---
apiVersion: hive.openshift.io/v1
kind: ClusterDeployment
metadata:
  name: ${SPOKE}
  namespace: ${SPOKE}
spec:
  baseDomain: ${DOMAIN}
  clusterName: ${SPOKE}
  controlPlaneConfig:
    servingCertificates: {}
  installed: false
  clusterInstallRef:
    group: extensions.hive.openshift.io
    kind: AgentClusterInstall
    name: ${SPOKE}
    version: v1beta1
  platform:
    agentBareMetal:
      agentSelector:
        matchLabels:
          cluster-name: "${SPOKE}"
  pullSecretRef:
    name: assisted-deployment-pull-secret
---
apiVersion: agent.open-cluster-management.io/v1
kind: KlusterletAddonConfig
metadata:
  name: ${SPOKE}
  namespace: ${SPOKE}
spec:
  clusterName: ${SPOKE}
  clusterNamespace: ${SPOKE}
  clusterLabels:
    cloud: auto-detect
    vendor: auto-detect
  workManager:
    enabled: true
  applicationManager:
    enabled: false
  certPolicyController:
    enabled: false
  iamPolicyController:
    enabled: false
  policyController:
    enabled: false
  searchCollector:
    enabled: false
---
apiVersion: cluster.open-cluster-management.io/v1
kind: ManagedCluster
metadata:
  name: ${SPOKE}
  namespace: ${SPOKE}
spec:
  hubAcceptsClient: true
---
apiVersion: agent-install.openshift.io/v1beta1
kind: InfraEnv
metadata:
  name: ${SPOKE}
  namespace: ${SPOKE}
spec:
  clusterRef:
    name: ${SPOKE}
    namespace: ${SPOKE}
  sshAuthorizedKey: "${SSH_PUB_KEY}"
  agentLabels:
    cluster-name: "${SPOKE}"
  pullSecretRef:
    name: assisted-deployment-pull-secret
  nmStateConfigLabelSelector:
    matchLabels:
      cluster-name: "${SPOKE}"
